@page
@using Microsoft.AspNetCore.Http
@model LoginModel
@{
    ViewData["Title"] = "Home page";
}

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Login</title>
  <link rel="stylesheet" href="~/css/login-page.css">
 @* <script defer src="login-page.js"></script>*@
</head>

<body>
  <main id="main-holder">
    <h1 id="login-header">Login</h1>
    
    <div id="login-error-msg-holder">
      <p id="login-error-msg">Invalid username <span id="error-msg-second-line">and/or password</span></p>
    </div>
    
    <form id="login-form">
      <input type="text" name="username" id="username-field" class="login-form-field" placeholder="Username">
      <input type="password" name="password" id="password-field" class="login-form-field" placeholder="Password">
      <input type="submit" value="Login" id="login-form-submit">
    </form>
  
  </main>

  <p><b>Name:</b> @HttpContext.Session.GetString("_Name");<b>Age:

</b> @HttpContext.Session.GetInt32("_Age").ToString()</p>
</body>

<p>AuthHeader: @HttpContext.Session.GetString("_AuthHeader");</p>

 

  
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<script>
$(document).ready(function(){
    const loginForm = document.getElementById("login-form");
    const loginButton = document.getElementById("login-form-submit");
    const loginErrorMsg = document.getElementById("login-error-msg");
    //const string SessionKeyName = "_Name";
    //const string SessionKeyAge = "_Age";

    //        HttpContext.Session.SetString(SessionKeyName, "The Doctor");
    //        HttpContext.Session.SetInt32(SessionKeyAge, 73);

    //        var name = HttpContext.Session.GetString(SessionKeyName);
    //        var age = HttpContext.Session.GetInt32(SessionKeyAge).ToString();


    loginButton.addEventListener("click", (e) => {
        
        
        e.preventDefault();
        const username = loginForm.username.value;
        const password = loginForm.password.value;
        //var cookieOptions = new CookieOptions(); 
        //cookieOptions.Expires = DateTime.Now.AddDays(1);
        //cookieOptions.Path = "/"; 
        //Response.Cookies.Append("authHeader", "Basic dGVzdENocmlzOnRlc3RDaHJpcw==", cookieOptions);

        setCookie("authHeader", "christopher", 365);

        if (username === "user" && password === "web_dev") {
            alert("You have successfully logged in.");
            location.reload();
        } else {
            loginErrorMsg.style.opacity = 1;
        }
    })

    function setCookie(cname, cvalue, exdays) {
      const d = new Date();
      d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
      let expires = "expires="+d.toUTCString();
      document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
    }

    function getCookie(cname) {
      let name = cname + "=";
      let ca = document.cookie.split(';');
      for(let i = 0; i < ca.length; i++) {
        let c = ca[i];
        while (c.charAt(0) == ' ') {
          c = c.substring(1);
        }
        if (c.indexOf(name) == 0) {
          return c.substring(name.length, c.length);
        }
      }
      return "";
    }


});
</script>
